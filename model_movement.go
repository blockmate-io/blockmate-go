/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// Movement Movement
type Movement struct {
	Address string `json:"address"`
	Currency string `json:"currency"`
	CurrencyName string `json:"currency_name"`
	CurrencySymbol string `json:"currency_symbol"`
	Value float32 `json:"value"`
	Owned bool `json:"owned"`
	Fee bool `json:"fee"`
	ImageName NullableString `json:"image_name,omitempty"`
	ImageUrl NullableString `json:"image_url,omitempty"`
	ConvertedCurrency *string `json:"converted_currency,omitempty"`
	ConvertedValue *float32 `json:"converted_value,omitempty"`
	// name if known
	Name *string `json:"name,omitempty"`
	// category if known
	Category *string `json:"category,omitempty"`
}

// NewMovement instantiates a new Movement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovement(address string, currency string, currencyName string, currencySymbol string, value float32, owned bool, fee bool) *Movement {
	this := Movement{}
	this.Address = address
	this.Currency = currency
	this.CurrencyName = currencyName
	this.CurrencySymbol = currencySymbol
	this.Value = value
	this.Owned = owned
	this.Fee = fee
	return &this
}

// NewMovementWithDefaults instantiates a new Movement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovementWithDefaults() *Movement {
	this := Movement{}
	return &this
}

// GetAddress returns the Address field value
func (o *Movement) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Movement) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Movement) SetAddress(v string) {
	o.Address = v
}

// GetCurrency returns the Currency field value
func (o *Movement) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Movement) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Movement) SetCurrency(v string) {
	o.Currency = v
}

// GetCurrencyName returns the CurrencyName field value
func (o *Movement) GetCurrencyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyName
}

// GetCurrencyNameOk returns a tuple with the CurrencyName field value
// and a boolean to check if the value has been set.
func (o *Movement) GetCurrencyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyName, true
}

// SetCurrencyName sets field value
func (o *Movement) SetCurrencyName(v string) {
	o.CurrencyName = v
}

// GetCurrencySymbol returns the CurrencySymbol field value
func (o *Movement) GetCurrencySymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value
// and a boolean to check if the value has been set.
func (o *Movement) GetCurrencySymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencySymbol, true
}

// SetCurrencySymbol sets field value
func (o *Movement) SetCurrencySymbol(v string) {
	o.CurrencySymbol = v
}

// GetValue returns the Value field value
func (o *Movement) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Movement) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Movement) SetValue(v float32) {
	o.Value = v
}

// GetOwned returns the Owned field value
func (o *Movement) GetOwned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Owned
}

// GetOwnedOk returns a tuple with the Owned field value
// and a boolean to check if the value has been set.
func (o *Movement) GetOwnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owned, true
}

// SetOwned sets field value
func (o *Movement) SetOwned(v bool) {
	o.Owned = v
}

// GetFee returns the Fee field value
func (o *Movement) GetFee() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *Movement) GetFeeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *Movement) SetFee(v bool) {
	o.Fee = v
}

// GetImageName returns the ImageName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Movement) GetImageName() string {
	if o == nil || o.ImageName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImageName.Get()
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Movement) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageName.Get(), o.ImageName.IsSet()
}

// HasImageName returns a boolean if a field has been set.
func (o *Movement) HasImageName() bool {
	if o != nil && o.ImageName.IsSet() {
		return true
	}

	return false
}

// SetImageName gets a reference to the given NullableString and assigns it to the ImageName field.
func (o *Movement) SetImageName(v string) {
	o.ImageName.Set(&v)
}
// SetImageNameNil sets the value for ImageName to be an explicit nil
func (o *Movement) SetImageNameNil() {
	o.ImageName.Set(nil)
}

// UnsetImageName ensures that no value is present for ImageName, not even an explicit nil
func (o *Movement) UnsetImageName() {
	o.ImageName.Unset()
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Movement) GetImageUrl() string {
	if o == nil || o.ImageUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Movement) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *Movement) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableString and assigns it to the ImageUrl field.
func (o *Movement) SetImageUrl(v string) {
	o.ImageUrl.Set(&v)
}
// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *Movement) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *Movement) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetConvertedCurrency returns the ConvertedCurrency field value if set, zero value otherwise.
func (o *Movement) GetConvertedCurrency() string {
	if o == nil || o.ConvertedCurrency == nil {
		var ret string
		return ret
	}
	return *o.ConvertedCurrency
}

// GetConvertedCurrencyOk returns a tuple with the ConvertedCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Movement) GetConvertedCurrencyOk() (*string, bool) {
	if o == nil || o.ConvertedCurrency == nil {
		return nil, false
	}
	return o.ConvertedCurrency, true
}

// HasConvertedCurrency returns a boolean if a field has been set.
func (o *Movement) HasConvertedCurrency() bool {
	if o != nil && o.ConvertedCurrency != nil {
		return true
	}

	return false
}

// SetConvertedCurrency gets a reference to the given string and assigns it to the ConvertedCurrency field.
func (o *Movement) SetConvertedCurrency(v string) {
	o.ConvertedCurrency = &v
}

// GetConvertedValue returns the ConvertedValue field value if set, zero value otherwise.
func (o *Movement) GetConvertedValue() float32 {
	if o == nil || o.ConvertedValue == nil {
		var ret float32
		return ret
	}
	return *o.ConvertedValue
}

// GetConvertedValueOk returns a tuple with the ConvertedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Movement) GetConvertedValueOk() (*float32, bool) {
	if o == nil || o.ConvertedValue == nil {
		return nil, false
	}
	return o.ConvertedValue, true
}

// HasConvertedValue returns a boolean if a field has been set.
func (o *Movement) HasConvertedValue() bool {
	if o != nil && o.ConvertedValue != nil {
		return true
	}

	return false
}

// SetConvertedValue gets a reference to the given float32 and assigns it to the ConvertedValue field.
func (o *Movement) SetConvertedValue(v float32) {
	o.ConvertedValue = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Movement) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Movement) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Movement) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Movement) SetName(v string) {
	o.Name = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Movement) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Movement) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Movement) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Movement) SetCategory(v string) {
	o.Category = &v
}

func (o Movement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["currency_name"] = o.CurrencyName
	}
	if true {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["owned"] = o.Owned
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if o.ImageName.IsSet() {
		toSerialize["image_name"] = o.ImageName.Get()
	}
	if o.ImageUrl.IsSet() {
		toSerialize["image_url"] = o.ImageUrl.Get()
	}
	if o.ConvertedCurrency != nil {
		toSerialize["converted_currency"] = o.ConvertedCurrency
	}
	if o.ConvertedValue != nil {
		toSerialize["converted_value"] = o.ConvertedValue
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	return json.Marshal(toSerialize)
}

type NullableMovement struct {
	value *Movement
	isSet bool
}

func (v NullableMovement) Get() *Movement {
	return v.value
}

func (v *NullableMovement) Set(val *Movement) {
	v.value = val
	v.isSet = true
}

func (v NullableMovement) IsSet() bool {
	return v.isSet
}

func (v *NullableMovement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovement(val *Movement) *NullableMovement {
	return &NullableMovement{value: val, isSet: true}
}

func (v NullableMovement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


