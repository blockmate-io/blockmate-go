/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// NftContractMetadata struct for NftContractMetadata
type NftContractMetadata struct {
	// String - NFT contract name.
	Name *string `json:"name,omitempty"`
	// String - NFT contract symbol abbreviation.
	Symbol *string `json:"symbol,omitempty"`
	// String - Total number of NFTs in a given NFT collection.
	TotalSupply *string `json:"totalSupply,omitempty"`
	// String - 'ERC721' or 'ERC1155'
	TokenType *string `json:"tokenType,omitempty"`
}

// NewNftContractMetadata instantiates a new NftContractMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftContractMetadata() *NftContractMetadata {
	this := NftContractMetadata{}
	return &this
}

// NewNftContractMetadataWithDefaults instantiates a new NftContractMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftContractMetadataWithDefaults() *NftContractMetadata {
	this := NftContractMetadata{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NftContractMetadata) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftContractMetadata) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NftContractMetadata) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NftContractMetadata) SetName(v string) {
	o.Name = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *NftContractMetadata) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftContractMetadata) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *NftContractMetadata) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *NftContractMetadata) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise.
func (o *NftContractMetadata) GetTotalSupply() string {
	if o == nil || o.TotalSupply == nil {
		var ret string
		return ret
	}
	return *o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftContractMetadata) GetTotalSupplyOk() (*string, bool) {
	if o == nil || o.TotalSupply == nil {
		return nil, false
	}
	return o.TotalSupply, true
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *NftContractMetadata) HasTotalSupply() bool {
	if o != nil && o.TotalSupply != nil {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given string and assigns it to the TotalSupply field.
func (o *NftContractMetadata) SetTotalSupply(v string) {
	o.TotalSupply = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *NftContractMetadata) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftContractMetadata) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *NftContractMetadata) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *NftContractMetadata) SetTokenType(v string) {
	o.TokenType = &v
}

func (o NftContractMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TotalSupply != nil {
		toSerialize["totalSupply"] = o.TotalSupply
	}
	if o.TokenType != nil {
		toSerialize["tokenType"] = o.TokenType
	}
	return json.Marshal(toSerialize)
}

type NullableNftContractMetadata struct {
	value *NftContractMetadata
	isSet bool
}

func (v NullableNftContractMetadata) Get() *NftContractMetadata {
	return v.value
}

func (v *NullableNftContractMetadata) Set(val *NftContractMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableNftContractMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableNftContractMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftContractMetadata(val *NftContractMetadata) *NullableNftContractMetadata {
	return &NullableNftContractMetadata{value: val, isSet: true}
}

func (v NullableNftContractMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftContractMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


