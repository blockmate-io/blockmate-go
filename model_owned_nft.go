/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// OwnedNft OwnedNft
type OwnedNft struct {
	Contract *OwnedNftContract `json:"contract,omitempty"`
	Id *NftId `json:"id,omitempty"`
	// String - Token balance
	Balance *string `json:"balance,omitempty"`
	// String - Name of the NFT asset.
	Title *string `json:"title,omitempty"`
	// String - Brief human-readable description
	Description *string `json:"description,omitempty"`
	TokenUri *NftTokenUri `json:"tokenUri,omitempty"`
	Media *OwnedNftMedia `json:"media,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	// String - ISO timestamp of the last cache refresh for the information returned in the metadata field.
	TimeLastUpdated *string `json:"timeLastUpdated,omitempty"`
	// String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.
	Error *string `json:"error,omitempty"`
	ContractMetadata *NftContractMetadata `json:"contractMetadata,omitempty"`
	SpamInfo *NftSpamInfo `json:"spamInfo,omitempty"`
}

// NewOwnedNft instantiates a new OwnedNft object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnedNft() *OwnedNft {
	this := OwnedNft{}
	return &this
}

// NewOwnedNftWithDefaults instantiates a new OwnedNft object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnedNftWithDefaults() *OwnedNft {
	this := OwnedNft{}
	return &this
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *OwnedNft) GetContract() OwnedNftContract {
	if o == nil || o.Contract == nil {
		var ret OwnedNftContract
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetContractOk() (*OwnedNftContract, bool) {
	if o == nil || o.Contract == nil {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *OwnedNft) HasContract() bool {
	if o != nil && o.Contract != nil {
		return true
	}

	return false
}

// SetContract gets a reference to the given OwnedNftContract and assigns it to the Contract field.
func (o *OwnedNft) SetContract(v OwnedNftContract) {
	o.Contract = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OwnedNft) GetId() NftId {
	if o == nil || o.Id == nil {
		var ret NftId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetIdOk() (*NftId, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OwnedNft) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given NftId and assigns it to the Id field.
func (o *OwnedNft) SetId(v NftId) {
	o.Id = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *OwnedNft) GetBalance() string {
	if o == nil || o.Balance == nil {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetBalanceOk() (*string, bool) {
	if o == nil || o.Balance == nil {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *OwnedNft) HasBalance() bool {
	if o != nil && o.Balance != nil {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *OwnedNft) SetBalance(v string) {
	o.Balance = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *OwnedNft) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *OwnedNft) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *OwnedNft) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OwnedNft) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OwnedNft) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OwnedNft) SetDescription(v string) {
	o.Description = &v
}

// GetTokenUri returns the TokenUri field value if set, zero value otherwise.
func (o *OwnedNft) GetTokenUri() NftTokenUri {
	if o == nil || o.TokenUri == nil {
		var ret NftTokenUri
		return ret
	}
	return *o.TokenUri
}

// GetTokenUriOk returns a tuple with the TokenUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetTokenUriOk() (*NftTokenUri, bool) {
	if o == nil || o.TokenUri == nil {
		return nil, false
	}
	return o.TokenUri, true
}

// HasTokenUri returns a boolean if a field has been set.
func (o *OwnedNft) HasTokenUri() bool {
	if o != nil && o.TokenUri != nil {
		return true
	}

	return false
}

// SetTokenUri gets a reference to the given NftTokenUri and assigns it to the TokenUri field.
func (o *OwnedNft) SetTokenUri(v NftTokenUri) {
	o.TokenUri = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *OwnedNft) GetMedia() OwnedNftMedia {
	if o == nil || o.Media == nil {
		var ret OwnedNftMedia
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetMediaOk() (*OwnedNftMedia, bool) {
	if o == nil || o.Media == nil {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *OwnedNft) HasMedia() bool {
	if o != nil && o.Media != nil {
		return true
	}

	return false
}

// SetMedia gets a reference to the given OwnedNftMedia and assigns it to the Media field.
func (o *OwnedNft) SetMedia(v OwnedNftMedia) {
	o.Media = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *OwnedNft) GetMetadata() Metadata {
	if o == nil || o.Metadata == nil {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetMetadataOk() (*Metadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *OwnedNft) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *OwnedNft) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetTimeLastUpdated returns the TimeLastUpdated field value if set, zero value otherwise.
func (o *OwnedNft) GetTimeLastUpdated() string {
	if o == nil || o.TimeLastUpdated == nil {
		var ret string
		return ret
	}
	return *o.TimeLastUpdated
}

// GetTimeLastUpdatedOk returns a tuple with the TimeLastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetTimeLastUpdatedOk() (*string, bool) {
	if o == nil || o.TimeLastUpdated == nil {
		return nil, false
	}
	return o.TimeLastUpdated, true
}

// HasTimeLastUpdated returns a boolean if a field has been set.
func (o *OwnedNft) HasTimeLastUpdated() bool {
	if o != nil && o.TimeLastUpdated != nil {
		return true
	}

	return false
}

// SetTimeLastUpdated gets a reference to the given string and assigns it to the TimeLastUpdated field.
func (o *OwnedNft) SetTimeLastUpdated(v string) {
	o.TimeLastUpdated = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *OwnedNft) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *OwnedNft) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *OwnedNft) SetError(v string) {
	o.Error = &v
}

// GetContractMetadata returns the ContractMetadata field value if set, zero value otherwise.
func (o *OwnedNft) GetContractMetadata() NftContractMetadata {
	if o == nil || o.ContractMetadata == nil {
		var ret NftContractMetadata
		return ret
	}
	return *o.ContractMetadata
}

// GetContractMetadataOk returns a tuple with the ContractMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetContractMetadataOk() (*NftContractMetadata, bool) {
	if o == nil || o.ContractMetadata == nil {
		return nil, false
	}
	return o.ContractMetadata, true
}

// HasContractMetadata returns a boolean if a field has been set.
func (o *OwnedNft) HasContractMetadata() bool {
	if o != nil && o.ContractMetadata != nil {
		return true
	}

	return false
}

// SetContractMetadata gets a reference to the given NftContractMetadata and assigns it to the ContractMetadata field.
func (o *OwnedNft) SetContractMetadata(v NftContractMetadata) {
	o.ContractMetadata = &v
}

// GetSpamInfo returns the SpamInfo field value if set, zero value otherwise.
func (o *OwnedNft) GetSpamInfo() NftSpamInfo {
	if o == nil || o.SpamInfo == nil {
		var ret NftSpamInfo
		return ret
	}
	return *o.SpamInfo
}

// GetSpamInfoOk returns a tuple with the SpamInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnedNft) GetSpamInfoOk() (*NftSpamInfo, bool) {
	if o == nil || o.SpamInfo == nil {
		return nil, false
	}
	return o.SpamInfo, true
}

// HasSpamInfo returns a boolean if a field has been set.
func (o *OwnedNft) HasSpamInfo() bool {
	if o != nil && o.SpamInfo != nil {
		return true
	}

	return false
}

// SetSpamInfo gets a reference to the given NftSpamInfo and assigns it to the SpamInfo field.
func (o *OwnedNft) SetSpamInfo(v NftSpamInfo) {
	o.SpamInfo = &v
}

func (o OwnedNft) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Contract != nil {
		toSerialize["contract"] = o.Contract
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Balance != nil {
		toSerialize["balance"] = o.Balance
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TokenUri != nil {
		toSerialize["tokenUri"] = o.TokenUri
	}
	if o.Media != nil {
		toSerialize["media"] = o.Media
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.TimeLastUpdated != nil {
		toSerialize["timeLastUpdated"] = o.TimeLastUpdated
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ContractMetadata != nil {
		toSerialize["contractMetadata"] = o.ContractMetadata
	}
	if o.SpamInfo != nil {
		toSerialize["spamInfo"] = o.SpamInfo
	}
	return json.Marshal(toSerialize)
}

type NullableOwnedNft struct {
	value *OwnedNft
	isSet bool
}

func (v NullableOwnedNft) Get() *OwnedNft {
	return v.value
}

func (v *NullableOwnedNft) Set(val *OwnedNft) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnedNft) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnedNft) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnedNft(val *OwnedNft) *NullableOwnedNft {
	return &NullableOwnedNft{value: val, isSet: true}
}

func (v NullableOwnedNft) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnedNft) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


