/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// Transaction Represents a transaction.
type Transaction struct {
	AccountId string `json:"account_id"`
	TransactionId string `json:"transaction_id"`
	Type string `json:"type"`
	Side *string `json:"side,omitempty"`
	Amount []Amount `json:"amount"`
	Total []Amount `json:"total"`
	Fee []Amount `json:"fee"`
	CreatedAt string `json:"created_at"`
	Inputs []Movement `json:"inputs"`
	Outputs []Movement `json:"outputs"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(accountId string, transactionId string, type_ string, amount []Amount, total []Amount, fee []Amount, createdAt string, inputs []Movement, outputs []Movement) *Transaction {
	this := Transaction{}
	this.AccountId = accountId
	this.TransactionId = transactionId
	this.Type = type_
	this.Amount = amount
	this.Total = total
	this.Fee = fee
	this.CreatedAt = createdAt
	this.Inputs = inputs
	this.Outputs = outputs
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *Transaction) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Transaction) SetAccountId(v string) {
	o.AccountId = v
}

// GetTransactionId returns the TransactionId field value
func (o *Transaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *Transaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetType returns the Type field value
func (o *Transaction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transaction) SetType(v string) {
	o.Type = v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Transaction) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Transaction) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *Transaction) SetSide(v string) {
	o.Side = &v
}

// GetAmount returns the Amount field value
func (o *Transaction) GetAmount() []Amount {
	if o == nil {
		var ret []Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() ([]Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount, true
}

// SetAmount sets field value
func (o *Transaction) SetAmount(v []Amount) {
	o.Amount = v
}

// GetTotal returns the Total field value
func (o *Transaction) GetTotal() []Amount {
	if o == nil {
		var ret []Amount
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalOk() ([]Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total, true
}

// SetTotal sets field value
func (o *Transaction) SetTotal(v []Amount) {
	o.Total = v
}

// GetFee returns the Fee field value
func (o *Transaction) GetFee() []Amount {
	if o == nil {
		var ret []Amount
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetFeeOk() ([]Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fee, true
}

// SetFee sets field value
func (o *Transaction) SetFee(v []Amount) {
	o.Fee = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Transaction) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Transaction) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetInputs returns the Inputs field value
func (o *Transaction) GetInputs() []Movement {
	if o == nil {
		var ret []Movement
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetInputsOk() ([]Movement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *Transaction) SetInputs(v []Movement) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value
func (o *Transaction) GetOutputs() []Movement {
	if o == nil {
		var ret []Movement
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetOutputsOk() ([]Movement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outputs, true
}

// SetOutputs sets field value
func (o *Transaction) SetOutputs(v []Movement) {
	o.Outputs = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["inputs"] = o.Inputs
	}
	if true {
		toSerialize["outputs"] = o.Outputs
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


