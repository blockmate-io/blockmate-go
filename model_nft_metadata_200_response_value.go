/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// NFTMetadata200ResponseValue struct for NFTMetadata200ResponseValue
type NFTMetadata200ResponseValue struct {
	OwnedNfts []OwnedNft `json:"ownedNfts,omitempty"`
	// String - Total number of NFTs owned by the given address.
	TotalCount *string `json:"totalCount,omitempty"`
	// String - The canonical head block hash of when your request was received
	BlockHash *string `json:"blockHash,omitempty"`
}

// NewNFTMetadata200ResponseValue instantiates a new NFTMetadata200ResponseValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFTMetadata200ResponseValue() *NFTMetadata200ResponseValue {
	this := NFTMetadata200ResponseValue{}
	return &this
}

// NewNFTMetadata200ResponseValueWithDefaults instantiates a new NFTMetadata200ResponseValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFTMetadata200ResponseValueWithDefaults() *NFTMetadata200ResponseValue {
	this := NFTMetadata200ResponseValue{}
	return &this
}

// GetOwnedNfts returns the OwnedNfts field value if set, zero value otherwise.
func (o *NFTMetadata200ResponseValue) GetOwnedNfts() []OwnedNft {
	if o == nil || o.OwnedNfts == nil {
		var ret []OwnedNft
		return ret
	}
	return o.OwnedNfts
}

// GetOwnedNftsOk returns a tuple with the OwnedNfts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTMetadata200ResponseValue) GetOwnedNftsOk() ([]OwnedNft, bool) {
	if o == nil || o.OwnedNfts == nil {
		return nil, false
	}
	return o.OwnedNfts, true
}

// HasOwnedNfts returns a boolean if a field has been set.
func (o *NFTMetadata200ResponseValue) HasOwnedNfts() bool {
	if o != nil && o.OwnedNfts != nil {
		return true
	}

	return false
}

// SetOwnedNfts gets a reference to the given []OwnedNft and assigns it to the OwnedNfts field.
func (o *NFTMetadata200ResponseValue) SetOwnedNfts(v []OwnedNft) {
	o.OwnedNfts = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *NFTMetadata200ResponseValue) GetTotalCount() string {
	if o == nil || o.TotalCount == nil {
		var ret string
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTMetadata200ResponseValue) GetTotalCountOk() (*string, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *NFTMetadata200ResponseValue) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given string and assigns it to the TotalCount field.
func (o *NFTMetadata200ResponseValue) SetTotalCount(v string) {
	o.TotalCount = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *NFTMetadata200ResponseValue) GetBlockHash() string {
	if o == nil || o.BlockHash == nil {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTMetadata200ResponseValue) GetBlockHashOk() (*string, bool) {
	if o == nil || o.BlockHash == nil {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *NFTMetadata200ResponseValue) HasBlockHash() bool {
	if o != nil && o.BlockHash != nil {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *NFTMetadata200ResponseValue) SetBlockHash(v string) {
	o.BlockHash = &v
}

func (o NFTMetadata200ResponseValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OwnedNfts != nil {
		toSerialize["ownedNfts"] = o.OwnedNfts
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.BlockHash != nil {
		toSerialize["blockHash"] = o.BlockHash
	}
	return json.Marshal(toSerialize)
}

type NullableNFTMetadata200ResponseValue struct {
	value *NFTMetadata200ResponseValue
	isSet bool
}

func (v NullableNFTMetadata200ResponseValue) Get() *NFTMetadata200ResponseValue {
	return v.value
}

func (v *NullableNFTMetadata200ResponseValue) Set(val *NFTMetadata200ResponseValue) {
	v.value = val
	v.isSet = true
}

func (v NullableNFTMetadata200ResponseValue) IsSet() bool {
	return v.isSet
}

func (v *NullableNFTMetadata200ResponseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFTMetadata200ResponseValue(val *NFTMetadata200ResponseValue) *NullableNFTMetadata200ResponseValue {
	return &NullableNFTMetadata200ResponseValue{value: val, isSet: true}
}

func (v NullableNFTMetadata200ResponseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFTMetadata200ResponseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


