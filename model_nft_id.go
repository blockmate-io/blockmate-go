/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// NftId struct for NftId
type NftId struct {
	// String - The ID of the token. Can be in hex or decimal format.
	TokenId *string `json:"tokenId,omitempty"`
	TokenMetadata *NftIdTokenMetadata `json:"tokenMetadata,omitempty"`
}

// NewNftId instantiates a new NftId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftId() *NftId {
	this := NftId{}
	return &this
}

// NewNftIdWithDefaults instantiates a new NftId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftIdWithDefaults() *NftId {
	this := NftId{}
	return &this
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *NftId) GetTokenId() string {
	if o == nil || o.TokenId == nil {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftId) GetTokenIdOk() (*string, bool) {
	if o == nil || o.TokenId == nil {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *NftId) HasTokenId() bool {
	if o != nil && o.TokenId != nil {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *NftId) SetTokenId(v string) {
	o.TokenId = &v
}

// GetTokenMetadata returns the TokenMetadata field value if set, zero value otherwise.
func (o *NftId) GetTokenMetadata() NftIdTokenMetadata {
	if o == nil || o.TokenMetadata == nil {
		var ret NftIdTokenMetadata
		return ret
	}
	return *o.TokenMetadata
}

// GetTokenMetadataOk returns a tuple with the TokenMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftId) GetTokenMetadataOk() (*NftIdTokenMetadata, bool) {
	if o == nil || o.TokenMetadata == nil {
		return nil, false
	}
	return o.TokenMetadata, true
}

// HasTokenMetadata returns a boolean if a field has been set.
func (o *NftId) HasTokenMetadata() bool {
	if o != nil && o.TokenMetadata != nil {
		return true
	}

	return false
}

// SetTokenMetadata gets a reference to the given NftIdTokenMetadata and assigns it to the TokenMetadata field.
func (o *NftId) SetTokenMetadata(v NftIdTokenMetadata) {
	o.TokenMetadata = &v
}

func (o NftId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenId != nil {
		toSerialize["tokenId"] = o.TokenId
	}
	if o.TokenMetadata != nil {
		toSerialize["tokenMetadata"] = o.TokenMetadata
	}
	return json.Marshal(toSerialize)
}

type NullableNftId struct {
	value *NftId
	isSet bool
}

func (v NullableNftId) Get() *NftId {
	return v.value
}

func (v *NullableNftId) Set(val *NftId) {
	v.value = val
	v.isSet = true
}

func (v NullableNftId) IsSet() bool {
	return v.isSet
}

func (v *NullableNftId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftId(val *NftId) *NullableNftId {
	return &NullableNftId{value: val, isSet: true}
}

func (v NullableNftId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


