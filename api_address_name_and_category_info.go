/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AddressNameAndCategoryInfoApiService AddressNameAndCategoryInfoApi service
type AddressNameAndCategoryInfoApiService service

type ApiGetAddressNameInfoMultiRequest struct {
	ctx context.Context
	ApiService *AddressNameAndCategoryInfoApiService
	chain *string
	requestBody *[]string
}

// Blockchain identifier
func (r ApiGetAddressNameInfoMultiRequest) Chain(chain string) ApiGetAddressNameInfoMultiRequest {
	r.chain = &chain
	return r
}

// Addresses for which name and category should be returned (maximum of 5000 in one request)
func (r ApiGetAddressNameInfoMultiRequest) RequestBody(requestBody []string) ApiGetAddressNameInfoMultiRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiGetAddressNameInfoMultiRequest) Execute() (*map[string]GetAddressNameInfoMulti200ResponseValue, *http.Response, error) {
	return r.ApiService.GetAddressNameInfoMultiExecute(r)
}

/*
GetAddressNameInfoMulti Get address name and category info for multiple addresses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAddressNameInfoMultiRequest
*/
func (a *AddressNameAndCategoryInfoApiService) GetAddressNameInfoMulti(ctx context.Context) ApiGetAddressNameInfoMultiRequest {
	return ApiGetAddressNameInfoMultiRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]GetAddressNameInfoMulti200ResponseValue
func (a *AddressNameAndCategoryInfoApiService) GetAddressNameInfoMultiExecute(r ApiGetAddressNameInfoMultiRequest) (*map[string]GetAddressNameInfoMulti200ResponseValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]GetAddressNameInfoMulti200ResponseValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressNameAndCategoryInfoApiService.GetAddressNameInfoMulti")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/addressname/multi"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chain == nil {
		return localVarReturnValue, nil, reportError("chain is required and must be specified")
	}

	localVarQueryParams.Add("chain", parameterToString(*r.chain, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UserAPIAuthenticateProject400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UserAPIAuthenticateProject401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAddressNameInfoSingleRequest struct {
	ctx context.Context
	ApiService *AddressNameAndCategoryInfoApiService
	address *string
	chain *string
}

// Address for which name and category should be returned
func (r ApiGetAddressNameInfoSingleRequest) Address(address string) ApiGetAddressNameInfoSingleRequest {
	r.address = &address
	return r
}

// Blockchain identifier
func (r ApiGetAddressNameInfoSingleRequest) Chain(chain string) ApiGetAddressNameInfoSingleRequest {
	r.chain = &chain
	return r
}

func (r ApiGetAddressNameInfoSingleRequest) Execute() (*GetAddressNameInfoSingle200Response, *http.Response, error) {
	return r.ApiService.GetAddressNameInfoSingleExecute(r)
}

/*
GetAddressNameInfoSingle Get address name and category info for single address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAddressNameInfoSingleRequest
*/
func (a *AddressNameAndCategoryInfoApiService) GetAddressNameInfoSingle(ctx context.Context) ApiGetAddressNameInfoSingleRequest {
	return ApiGetAddressNameInfoSingleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAddressNameInfoSingle200Response
func (a *AddressNameAndCategoryInfoApiService) GetAddressNameInfoSingleExecute(r ApiGetAddressNameInfoSingleRequest) (*GetAddressNameInfoSingle200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAddressNameInfoSingle200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressNameAndCategoryInfoApiService.GetAddressNameInfoSingle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/addressname/simple"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}
	if r.chain == nil {
		return localVarReturnValue, nil, reportError("chain is required and must be specified")
	}

	localVarQueryParams.Add("address", parameterToString(*r.address, ""))
	localVarQueryParams.Add("chain", parameterToString(*r.chain, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UserAPIAuthenticateProject400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UserAPIAuthenticateProject401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
