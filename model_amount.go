/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// Amount Amount
type Amount struct {
	Value float32 `json:"value"`
	Currency string `json:"currency"`
	CurrencyName string `json:"currency_name"`
	CurrencySymbol string `json:"currency_symbol"`
	ImageName NullableString `json:"image_name,omitempty"`
	ImageUrl NullableString `json:"image_url,omitempty"`
	ConvertedCurrency *string `json:"converted_currency,omitempty"`
	ConvertedValue *float32 `json:"converted_value,omitempty"`
}

// NewAmount instantiates a new Amount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmount(value float32, currency string, currencyName string, currencySymbol string) *Amount {
	this := Amount{}
	this.Value = value
	this.Currency = currency
	this.CurrencyName = currencyName
	this.CurrencySymbol = currencySymbol
	return &this
}

// NewAmountWithDefaults instantiates a new Amount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountWithDefaults() *Amount {
	this := Amount{}
	return &this
}

// GetValue returns the Value field value
func (o *Amount) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Amount) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Amount) SetValue(v float32) {
	o.Value = v
}

// GetCurrency returns the Currency field value
func (o *Amount) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Amount) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Amount) SetCurrency(v string) {
	o.Currency = v
}

// GetCurrencyName returns the CurrencyName field value
func (o *Amount) GetCurrencyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyName
}

// GetCurrencyNameOk returns a tuple with the CurrencyName field value
// and a boolean to check if the value has been set.
func (o *Amount) GetCurrencyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyName, true
}

// SetCurrencyName sets field value
func (o *Amount) SetCurrencyName(v string) {
	o.CurrencyName = v
}

// GetCurrencySymbol returns the CurrencySymbol field value
func (o *Amount) GetCurrencySymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value
// and a boolean to check if the value has been set.
func (o *Amount) GetCurrencySymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencySymbol, true
}

// SetCurrencySymbol sets field value
func (o *Amount) SetCurrencySymbol(v string) {
	o.CurrencySymbol = v
}

// GetImageName returns the ImageName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Amount) GetImageName() string {
	if o == nil || o.ImageName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImageName.Get()
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Amount) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageName.Get(), o.ImageName.IsSet()
}

// HasImageName returns a boolean if a field has been set.
func (o *Amount) HasImageName() bool {
	if o != nil && o.ImageName.IsSet() {
		return true
	}

	return false
}

// SetImageName gets a reference to the given NullableString and assigns it to the ImageName field.
func (o *Amount) SetImageName(v string) {
	o.ImageName.Set(&v)
}
// SetImageNameNil sets the value for ImageName to be an explicit nil
func (o *Amount) SetImageNameNil() {
	o.ImageName.Set(nil)
}

// UnsetImageName ensures that no value is present for ImageName, not even an explicit nil
func (o *Amount) UnsetImageName() {
	o.ImageName.Unset()
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Amount) GetImageUrl() string {
	if o == nil || o.ImageUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Amount) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *Amount) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableString and assigns it to the ImageUrl field.
func (o *Amount) SetImageUrl(v string) {
	o.ImageUrl.Set(&v)
}
// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *Amount) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *Amount) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetConvertedCurrency returns the ConvertedCurrency field value if set, zero value otherwise.
func (o *Amount) GetConvertedCurrency() string {
	if o == nil || o.ConvertedCurrency == nil {
		var ret string
		return ret
	}
	return *o.ConvertedCurrency
}

// GetConvertedCurrencyOk returns a tuple with the ConvertedCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Amount) GetConvertedCurrencyOk() (*string, bool) {
	if o == nil || o.ConvertedCurrency == nil {
		return nil, false
	}
	return o.ConvertedCurrency, true
}

// HasConvertedCurrency returns a boolean if a field has been set.
func (o *Amount) HasConvertedCurrency() bool {
	if o != nil && o.ConvertedCurrency != nil {
		return true
	}

	return false
}

// SetConvertedCurrency gets a reference to the given string and assigns it to the ConvertedCurrency field.
func (o *Amount) SetConvertedCurrency(v string) {
	o.ConvertedCurrency = &v
}

// GetConvertedValue returns the ConvertedValue field value if set, zero value otherwise.
func (o *Amount) GetConvertedValue() float32 {
	if o == nil || o.ConvertedValue == nil {
		var ret float32
		return ret
	}
	return *o.ConvertedValue
}

// GetConvertedValueOk returns a tuple with the ConvertedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Amount) GetConvertedValueOk() (*float32, bool) {
	if o == nil || o.ConvertedValue == nil {
		return nil, false
	}
	return o.ConvertedValue, true
}

// HasConvertedValue returns a boolean if a field has been set.
func (o *Amount) HasConvertedValue() bool {
	if o != nil && o.ConvertedValue != nil {
		return true
	}

	return false
}

// SetConvertedValue gets a reference to the given float32 and assigns it to the ConvertedValue field.
func (o *Amount) SetConvertedValue(v float32) {
	o.ConvertedValue = &v
}

func (o Amount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["currency_name"] = o.CurrencyName
	}
	if true {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	if o.ImageName.IsSet() {
		toSerialize["image_name"] = o.ImageName.Get()
	}
	if o.ImageUrl.IsSet() {
		toSerialize["image_url"] = o.ImageUrl.Get()
	}
	if o.ConvertedCurrency != nil {
		toSerialize["converted_currency"] = o.ConvertedCurrency
	}
	if o.ConvertedValue != nil {
		toSerialize["converted_value"] = o.ConvertedValue
	}
	return json.Marshal(toSerialize)
}

type NullableAmount struct {
	value *Amount
	isSet bool
}

func (v NullableAmount) Get() *Amount {
	return v.value
}

func (v *NullableAmount) Set(val *Amount) {
	v.value = val
	v.isSet = true
}

func (v NullableAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmount(val *Amount) *NullableAmount {
	return &NullableAmount{value: val, isSet: true}
}

func (v NullableAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


