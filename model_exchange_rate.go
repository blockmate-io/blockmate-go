/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// ExchangeRate ExchangeRate
type ExchangeRate struct {
	CurrencyPair string `json:"currency_pair"`
	Date string `json:"date"`
	Rate float32 `json:"rate"`
}

// NewExchangeRate instantiates a new ExchangeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRate(currencyPair string, date string, rate float32) *ExchangeRate {
	this := ExchangeRate{}
	this.CurrencyPair = currencyPair
	this.Date = date
	this.Rate = rate
	return &this
}

// NewExchangeRateWithDefaults instantiates a new ExchangeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateWithDefaults() *ExchangeRate {
	this := ExchangeRate{}
	return &this
}

// GetCurrencyPair returns the CurrencyPair field value
func (o *ExchangeRate) GetCurrencyPair() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyPair
}

// GetCurrencyPairOk returns a tuple with the CurrencyPair field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetCurrencyPairOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyPair, true
}

// SetCurrencyPair sets field value
func (o *ExchangeRate) SetCurrencyPair(v string) {
	o.CurrencyPair = v
}

// GetDate returns the Date field value
func (o *ExchangeRate) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ExchangeRate) SetDate(v string) {
	o.Date = v
}

// GetRate returns the Rate field value
func (o *ExchangeRate) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *ExchangeRate) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *ExchangeRate) SetRate(v float32) {
	o.Rate = v
}

func (o ExchangeRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["currency_pair"] = o.CurrencyPair
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["rate"] = o.Rate
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeRate struct {
	value *ExchangeRate
	isSet bool
}

func (v NullableExchangeRate) Get() *ExchangeRate {
	return v.value
}

func (v *NullableExchangeRate) Set(val *ExchangeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRate(val *ExchangeRate) *NullableExchangeRate {
	return &NullableExchangeRate{value: val, isSet: true}
}

func (v NullableExchangeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


