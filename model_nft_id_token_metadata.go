/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// NftIdTokenMetadata struct for NftIdTokenMetadata
type NftIdTokenMetadata struct {
	// String - 'ERC721' or 'ERC1155'
	TokenType *string `json:"tokenType,omitempty"`
}

// NewNftIdTokenMetadata instantiates a new NftIdTokenMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftIdTokenMetadata() *NftIdTokenMetadata {
	this := NftIdTokenMetadata{}
	return &this
}

// NewNftIdTokenMetadataWithDefaults instantiates a new NftIdTokenMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftIdTokenMetadataWithDefaults() *NftIdTokenMetadata {
	this := NftIdTokenMetadata{}
	return &this
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *NftIdTokenMetadata) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftIdTokenMetadata) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *NftIdTokenMetadata) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *NftIdTokenMetadata) SetTokenType(v string) {
	o.TokenType = &v
}

func (o NftIdTokenMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenType != nil {
		toSerialize["tokenType"] = o.TokenType
	}
	return json.Marshal(toSerialize)
}

type NullableNftIdTokenMetadata struct {
	value *NftIdTokenMetadata
	isSet bool
}

func (v NullableNftIdTokenMetadata) Get() *NftIdTokenMetadata {
	return v.value
}

func (v *NullableNftIdTokenMetadata) Set(val *NftIdTokenMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableNftIdTokenMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableNftIdTokenMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftIdTokenMetadata(val *NftIdTokenMetadata) *NullableNftIdTokenMetadata {
	return &NullableNftIdTokenMetadata{value: val, isSet: true}
}

func (v NullableNftIdTokenMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftIdTokenMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


