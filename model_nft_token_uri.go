/*
Blockmate

Blockmate API OpenAPI documentation

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blockmate

import (
	"encoding/json"
)

// NftTokenUri struct for NftTokenUri
type NftTokenUri struct {
	// String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.
	Raw *string `json:"raw,omitempty"`
	// String - Public gateway uri for the raw uri above.
	Gateway *string `json:"gateway,omitempty"`
}

// NewNftTokenUri instantiates a new NftTokenUri object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTokenUri() *NftTokenUri {
	this := NftTokenUri{}
	return &this
}

// NewNftTokenUriWithDefaults instantiates a new NftTokenUri object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTokenUriWithDefaults() *NftTokenUri {
	this := NftTokenUri{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *NftTokenUri) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenUri) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *NftTokenUri) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *NftTokenUri) SetRaw(v string) {
	o.Raw = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *NftTokenUri) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenUri) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *NftTokenUri) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *NftTokenUri) SetGateway(v string) {
	o.Gateway = &v
}

func (o NftTokenUri) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	return json.Marshal(toSerialize)
}

type NullableNftTokenUri struct {
	value *NftTokenUri
	isSet bool
}

func (v NullableNftTokenUri) Get() *NftTokenUri {
	return v.value
}

func (v *NullableNftTokenUri) Set(val *NftTokenUri) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTokenUri) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTokenUri) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTokenUri(val *NftTokenUri) *NullableNftTokenUri {
	return &NullableNftTokenUri{value: val, isSet: true}
}

func (v NullableNftTokenUri) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTokenUri) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


